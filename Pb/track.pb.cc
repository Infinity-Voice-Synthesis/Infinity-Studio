// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track.proto

#include "track.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace org {
namespace infinity {
namespace idm {
constexpr Track::Track(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : containers_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mute_(false)
  , solo_(false)
  , gain_(0)
  , pan_(0)
  , mix_(0){}
struct TrackDefaultTypeInternal {
  constexpr TrackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackDefaultTypeInternal() {}
  union {
    Track _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackDefaultTypeInternal _Track_default_instance_;
}  // namespace idm
}  // namespace infinity
}  // namespace org
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_track_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_track_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_track_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_track_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Track, name_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Track, color_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Track, mute_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Track, solo_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Track, gain_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Track, pan_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Track, mix_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Track, containers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::infinity::idm::Track)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::infinity::idm::_Track_default_instance_),
};

const char descriptor_table_protodef_track_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013track.proto\022\020org.infinity.idm\032\017contain"
  "er.proto\"\231\001\n\005Track\022\014\n\004name\030\001 \001(\t\022\r\n\005colo"
  "r\030\002 \001(\t\022\014\n\004mute\030\010 \001(\010\022\014\n\004solo\030\t \001(\010\022\014\n\004g"
  "ain\030\n \001(\001\022\013\n\003pan\030\013 \001(\001\022\013\n\003mix\030\014 \001(\001\022/\n\nc"
  "ontainers\030\r \003(\0132\033.org.infinity.idm.Conta"
  "inerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_track_2eproto_deps[1] = {
  &::descriptor_table_container_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_track_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_track_2eproto = {
  false, false, 212, descriptor_table_protodef_track_2eproto, "track.proto", 
  &descriptor_table_track_2eproto_once, descriptor_table_track_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_track_2eproto::offsets,
  file_level_metadata_track_2eproto, file_level_enum_descriptors_track_2eproto, file_level_service_descriptors_track_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_track_2eproto_getter() {
  return &descriptor_table_track_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_track_2eproto(&descriptor_table_track_2eproto);
namespace org {
namespace infinity {
namespace idm {

// ===================================================================

class Track::_Internal {
 public:
};

void Track::clear_containers() {
  containers_.Clear();
}
Track::Track(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  containers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:org.infinity.idm.Track)
}
Track::Track(const Track& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mute_, &from.mute_,
    static_cast<size_t>(reinterpret_cast<char*>(&mix_) -
    reinterpret_cast<char*>(&mute_)) + sizeof(mix_));
  // @@protoc_insertion_point(copy_constructor:org.infinity.idm.Track)
}

inline void Track::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mute_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mix_) -
    reinterpret_cast<char*>(&mute_)) + sizeof(mix_));
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:org.infinity.idm.Track)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Track::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Track::ArenaDtor(void* object) {
  Track* _this = reinterpret_cast< Track* >(object);
  (void)_this;
}
void Track::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Track::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Track::Clear() {
// @@protoc_insertion_point(message_clear_start:org.infinity.idm.Track)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  name_.ClearToEmpty();
  color_.ClearToEmpty();
  ::memset(&mute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mix_) -
      reinterpret_cast<char*>(&mute_)) + sizeof(mix_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Track::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.infinity.idm.Track.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.infinity.idm.Track.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool solo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          solo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gain = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pan = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          pan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mix = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          mix_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .org.infinity.idm.Container containers = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_containers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Track::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.infinity.idm.Track)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.infinity.idm.Track.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string color = 2;
  if (!this->_internal_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.infinity.idm.Track.color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_color(), target);
  }

  // bool mute = 8;
  if (this->_internal_mute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_mute(), target);
  }

  // bool solo = 9;
  if (this->_internal_solo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_solo(), target);
  }

  // double gain = 10;
  if (!(this->_internal_gain() <= 0 && this->_internal_gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_gain(), target);
  }

  // double pan = 11;
  if (!(this->_internal_pan() <= 0 && this->_internal_pan() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_pan(), target);
  }

  // double mix = 12;
  if (!(this->_internal_mix() <= 0 && this->_internal_mix() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_mix(), target);
  }

  // repeated .org.infinity.idm.Container containers = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_containers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_containers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.infinity.idm.Track)
  return target;
}

size_t Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.infinity.idm.Track)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.infinity.idm.Container containers = 13;
  total_size += 1UL * this->_internal_containers_size();
  for (const auto& msg : this->containers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string color = 2;
  if (!this->_internal_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // bool mute = 8;
  if (this->_internal_mute() != 0) {
    total_size += 1 + 1;
  }

  // bool solo = 9;
  if (this->_internal_solo() != 0) {
    total_size += 1 + 1;
  }

  // double gain = 10;
  if (!(this->_internal_gain() <= 0 && this->_internal_gain() >= 0)) {
    total_size += 1 + 8;
  }

  // double pan = 11;
  if (!(this->_internal_pan() <= 0 && this->_internal_pan() >= 0)) {
    total_size += 1 + 8;
  }

  // double mix = 12;
  if (!(this->_internal_mix() <= 0 && this->_internal_mix() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Track::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Track::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Track::GetClassData() const { return &_class_data_; }

void Track::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Track *>(to)->MergeFrom(
      static_cast<const Track &>(from));
}


void Track::MergeFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.infinity.idm.Track)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_color().empty()) {
    _internal_set_color(from._internal_color());
  }
  if (from._internal_mute() != 0) {
    _internal_set_mute(from._internal_mute());
  }
  if (from._internal_solo() != 0) {
    _internal_set_solo(from._internal_solo());
  }
  if (!(from._internal_gain() <= 0 && from._internal_gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
  if (!(from._internal_pan() <= 0 && from._internal_pan() >= 0)) {
    _internal_set_pan(from._internal_pan());
  }
  if (!(from._internal_mix() <= 0 && from._internal_mix() >= 0)) {
    _internal_set_mix(from._internal_mix());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Track::CopyFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.infinity.idm.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  return true;
}

void Track::InternalSwap(Track* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  containers_.InternalSwap(&other->containers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, GetArenaForAllocation(),
      &other->color_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Track, mix_)
      + sizeof(Track::mix_)
      - PROTOBUF_FIELD_OFFSET(Track, mute_)>(
          reinterpret_cast<char*>(&mute_),
          reinterpret_cast<char*>(&other->mute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Track::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_track_2eproto_getter, &descriptor_table_track_2eproto_once,
      file_level_metadata_track_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace idm
}  // namespace infinity
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::infinity::idm::Track* Arena::CreateMaybeMessage< ::org::infinity::idm::Track >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::infinity::idm::Track >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
