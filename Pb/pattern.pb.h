// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pattern.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pattern_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pattern_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "note.pb.h"
#include "tparam.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pattern_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pattern_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pattern_2eproto;
namespace org {
namespace infinity {
namespace idm {
class Pattern;
struct PatternDefaultTypeInternal;
extern PatternDefaultTypeInternal _Pattern_default_instance_;
}  // namespace idm
}  // namespace infinity
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::infinity::idm::Pattern* Arena::CreateMaybeMessage<::org::infinity::idm::Pattern>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace infinity {
namespace idm {

enum Pattern_Type : int {
  Pattern_Type_EMPTY = 0,
  Pattern_Type_MIDI = 1,
  Pattern_Type_WAVE = 2,
  Pattern_Type_Pattern_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Pattern_Type_Pattern_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Pattern_Type_IsValid(int value);
constexpr Pattern_Type Pattern_Type_Type_MIN = Pattern_Type_EMPTY;
constexpr Pattern_Type Pattern_Type_Type_MAX = Pattern_Type_WAVE;
constexpr int Pattern_Type_Type_ARRAYSIZE = Pattern_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pattern_Type_descriptor();
template<typename T>
inline const std::string& Pattern_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Pattern_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Pattern_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Pattern_Type_descriptor(), enum_t_value);
}
inline bool Pattern_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Pattern_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Pattern_Type>(
    Pattern_Type_descriptor(), name, value);
}
// ===================================================================

class Pattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.infinity.idm.Pattern) */ {
 public:
  inline Pattern() : Pattern(nullptr) {}
  ~Pattern() override;
  explicit constexpr Pattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pattern(const Pattern& from);
  Pattern(Pattern&& from) noexcept
    : Pattern() {
    *this = ::std::move(from);
  }

  inline Pattern& operator=(const Pattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pattern& operator=(Pattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pattern* internal_default_instance() {
    return reinterpret_cast<const Pattern*>(
               &_Pattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pattern& a, Pattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Pattern* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pattern* New() const final {
    return new Pattern();
  }

  Pattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pattern& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.infinity.idm.Pattern";
  }
  protected:
  explicit Pattern(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Pattern_Type Type;
  static constexpr Type EMPTY =
    Pattern_Type_EMPTY;
  static constexpr Type MIDI =
    Pattern_Type_MIDI;
  static constexpr Type WAVE =
    Pattern_Type_WAVE;
  static inline bool Type_IsValid(int value) {
    return Pattern_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Pattern_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Pattern_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Pattern_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Pattern_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Pattern_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Pattern_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNotesFieldNumber = 9,
    kParamsFieldNumber = 10,
    kNameFieldNumber = 1,
    kFileFieldNumber = 3,
    kLibraryFieldNumber = 5,
    kDictionaryFieldNumber = 6,
    kTimbreAFieldNumber = 7,
    kTimbreBFieldNumber = 8,
    kDeviationFieldNumber = 4,
    kTypeFieldNumber = 2,
  };
  // repeated .org.infinity.idm.Note notes = 9;
  int notes_size() const;
  private:
  int _internal_notes_size() const;
  public:
  void clear_notes();
  ::org::infinity::idm::Note* mutable_notes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::Note >*
      mutable_notes();
  private:
  const ::org::infinity::idm::Note& _internal_notes(int index) const;
  ::org::infinity::idm::Note* _internal_add_notes();
  public:
  const ::org::infinity::idm::Note& notes(int index) const;
  ::org::infinity::idm::Note* add_notes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::Note >&
      notes() const;

  // repeated .org.infinity.idm.TrackParam params = 10;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::org::infinity::idm::TrackParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::TrackParam >*
      mutable_params();
  private:
  const ::org::infinity::idm::TrackParam& _internal_params(int index) const;
  ::org::infinity::idm::TrackParam* _internal_add_params();
  public:
  const ::org::infinity::idm::TrackParam& params(int index) const;
  ::org::infinity::idm::TrackParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::TrackParam >&
      params() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string file = 3;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_MUST_USE_RESULT std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string library = 5;
  void clear_library();
  const std::string& library() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_library(ArgT0&& arg0, ArgT... args);
  std::string* mutable_library();
  PROTOBUF_MUST_USE_RESULT std::string* release_library();
  void set_allocated_library(std::string* library);
  private:
  const std::string& _internal_library() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_library(const std::string& value);
  std::string* _internal_mutable_library();
  public:

  // string dictionary = 6;
  void clear_dictionary();
  const std::string& dictionary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dictionary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dictionary();
  PROTOBUF_MUST_USE_RESULT std::string* release_dictionary();
  void set_allocated_dictionary(std::string* dictionary);
  private:
  const std::string& _internal_dictionary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dictionary(const std::string& value);
  std::string* _internal_mutable_dictionary();
  public:

  // string timbreA = 7;
  void clear_timbrea();
  const std::string& timbrea() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timbrea(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timbrea();
  PROTOBUF_MUST_USE_RESULT std::string* release_timbrea();
  void set_allocated_timbrea(std::string* timbrea);
  private:
  const std::string& _internal_timbrea() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timbrea(const std::string& value);
  std::string* _internal_mutable_timbrea();
  public:

  // string timbreB = 8;
  void clear_timbreb();
  const std::string& timbreb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timbreb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timbreb();
  PROTOBUF_MUST_USE_RESULT std::string* release_timbreb();
  void set_allocated_timbreb(std::string* timbreb);
  private:
  const std::string& _internal_timbreb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timbreb(const std::string& value);
  std::string* _internal_mutable_timbreb();
  public:

  // uint64 deviation = 4;
  void clear_deviation();
  ::PROTOBUF_NAMESPACE_ID::uint64 deviation() const;
  void set_deviation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_deviation() const;
  void _internal_set_deviation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .org.infinity.idm.Pattern.Type type = 2;
  void clear_type();
  ::org::infinity::idm::Pattern_Type type() const;
  void set_type(::org::infinity::idm::Pattern_Type value);
  private:
  ::org::infinity::idm::Pattern_Type _internal_type() const;
  void _internal_set_type(::org::infinity::idm::Pattern_Type value);
  public:

  // @@protoc_insertion_point(class_scope:org.infinity.idm.Pattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::Note > notes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::TrackParam > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dictionary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timbrea_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timbreb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 deviation_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pattern_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pattern

// string name = 1;
inline void Pattern::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Pattern::name() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Pattern.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pattern::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.infinity.idm.Pattern.name)
}
inline std::string* Pattern::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Pattern.name)
  return _s;
}
inline const std::string& Pattern::_internal_name() const {
  return name_.Get();
}
inline void Pattern::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pattern::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pattern::release_name() {
  // @@protoc_insertion_point(field_release:org.infinity.idm.Pattern.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pattern::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.infinity.idm.Pattern.name)
}

// .org.infinity.idm.Pattern.Type type = 2;
inline void Pattern::clear_type() {
  type_ = 0;
}
inline ::org::infinity::idm::Pattern_Type Pattern::_internal_type() const {
  return static_cast< ::org::infinity::idm::Pattern_Type >(type_);
}
inline ::org::infinity::idm::Pattern_Type Pattern::type() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Pattern.type)
  return _internal_type();
}
inline void Pattern::_internal_set_type(::org::infinity::idm::Pattern_Type value) {
  
  type_ = value;
}
inline void Pattern::set_type(::org::infinity::idm::Pattern_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:org.infinity.idm.Pattern.type)
}

// string file = 3;
inline void Pattern::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& Pattern::file() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Pattern.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pattern::set_file(ArgT0&& arg0, ArgT... args) {
 
 file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.infinity.idm.Pattern.file)
}
inline std::string* Pattern::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Pattern.file)
  return _s;
}
inline const std::string& Pattern::_internal_file() const {
  return file_.Get();
}
inline void Pattern::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pattern::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pattern::release_file() {
  // @@protoc_insertion_point(field_release:org.infinity.idm.Pattern.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pattern::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.infinity.idm.Pattern.file)
}

// uint64 deviation = 4;
inline void Pattern::clear_deviation() {
  deviation_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pattern::_internal_deviation() const {
  return deviation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pattern::deviation() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Pattern.deviation)
  return _internal_deviation();
}
inline void Pattern::_internal_set_deviation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  deviation_ = value;
}
inline void Pattern::set_deviation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_deviation(value);
  // @@protoc_insertion_point(field_set:org.infinity.idm.Pattern.deviation)
}

// string library = 5;
inline void Pattern::clear_library() {
  library_.ClearToEmpty();
}
inline const std::string& Pattern::library() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Pattern.library)
  return _internal_library();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pattern::set_library(ArgT0&& arg0, ArgT... args) {
 
 library_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.infinity.idm.Pattern.library)
}
inline std::string* Pattern::mutable_library() {
  std::string* _s = _internal_mutable_library();
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Pattern.library)
  return _s;
}
inline const std::string& Pattern::_internal_library() const {
  return library_.Get();
}
inline void Pattern::_internal_set_library(const std::string& value) {
  
  library_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pattern::_internal_mutable_library() {
  
  return library_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pattern::release_library() {
  // @@protoc_insertion_point(field_release:org.infinity.idm.Pattern.library)
  return library_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pattern::set_allocated_library(std::string* library) {
  if (library != nullptr) {
    
  } else {
    
  }
  library_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), library,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.infinity.idm.Pattern.library)
}

// string dictionary = 6;
inline void Pattern::clear_dictionary() {
  dictionary_.ClearToEmpty();
}
inline const std::string& Pattern::dictionary() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Pattern.dictionary)
  return _internal_dictionary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pattern::set_dictionary(ArgT0&& arg0, ArgT... args) {
 
 dictionary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.infinity.idm.Pattern.dictionary)
}
inline std::string* Pattern::mutable_dictionary() {
  std::string* _s = _internal_mutable_dictionary();
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Pattern.dictionary)
  return _s;
}
inline const std::string& Pattern::_internal_dictionary() const {
  return dictionary_.Get();
}
inline void Pattern::_internal_set_dictionary(const std::string& value) {
  
  dictionary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pattern::_internal_mutable_dictionary() {
  
  return dictionary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pattern::release_dictionary() {
  // @@protoc_insertion_point(field_release:org.infinity.idm.Pattern.dictionary)
  return dictionary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pattern::set_allocated_dictionary(std::string* dictionary) {
  if (dictionary != nullptr) {
    
  } else {
    
  }
  dictionary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dictionary,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.infinity.idm.Pattern.dictionary)
}

// string timbreA = 7;
inline void Pattern::clear_timbrea() {
  timbrea_.ClearToEmpty();
}
inline const std::string& Pattern::timbrea() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Pattern.timbreA)
  return _internal_timbrea();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pattern::set_timbrea(ArgT0&& arg0, ArgT... args) {
 
 timbrea_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.infinity.idm.Pattern.timbreA)
}
inline std::string* Pattern::mutable_timbrea() {
  std::string* _s = _internal_mutable_timbrea();
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Pattern.timbreA)
  return _s;
}
inline const std::string& Pattern::_internal_timbrea() const {
  return timbrea_.Get();
}
inline void Pattern::_internal_set_timbrea(const std::string& value) {
  
  timbrea_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pattern::_internal_mutable_timbrea() {
  
  return timbrea_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pattern::release_timbrea() {
  // @@protoc_insertion_point(field_release:org.infinity.idm.Pattern.timbreA)
  return timbrea_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pattern::set_allocated_timbrea(std::string* timbrea) {
  if (timbrea != nullptr) {
    
  } else {
    
  }
  timbrea_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timbrea,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.infinity.idm.Pattern.timbreA)
}

// string timbreB = 8;
inline void Pattern::clear_timbreb() {
  timbreb_.ClearToEmpty();
}
inline const std::string& Pattern::timbreb() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Pattern.timbreB)
  return _internal_timbreb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pattern::set_timbreb(ArgT0&& arg0, ArgT... args) {
 
 timbreb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.infinity.idm.Pattern.timbreB)
}
inline std::string* Pattern::mutable_timbreb() {
  std::string* _s = _internal_mutable_timbreb();
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Pattern.timbreB)
  return _s;
}
inline const std::string& Pattern::_internal_timbreb() const {
  return timbreb_.Get();
}
inline void Pattern::_internal_set_timbreb(const std::string& value) {
  
  timbreb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pattern::_internal_mutable_timbreb() {
  
  return timbreb_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pattern::release_timbreb() {
  // @@protoc_insertion_point(field_release:org.infinity.idm.Pattern.timbreB)
  return timbreb_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pattern::set_allocated_timbreb(std::string* timbreb) {
  if (timbreb != nullptr) {
    
  } else {
    
  }
  timbreb_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timbreb,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.infinity.idm.Pattern.timbreB)
}

// repeated .org.infinity.idm.Note notes = 9;
inline int Pattern::_internal_notes_size() const {
  return notes_.size();
}
inline int Pattern::notes_size() const {
  return _internal_notes_size();
}
inline ::org::infinity::idm::Note* Pattern::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Pattern.notes)
  return notes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::Note >*
Pattern::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:org.infinity.idm.Pattern.notes)
  return &notes_;
}
inline const ::org::infinity::idm::Note& Pattern::_internal_notes(int index) const {
  return notes_.Get(index);
}
inline const ::org::infinity::idm::Note& Pattern::notes(int index) const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Pattern.notes)
  return _internal_notes(index);
}
inline ::org::infinity::idm::Note* Pattern::_internal_add_notes() {
  return notes_.Add();
}
inline ::org::infinity::idm::Note* Pattern::add_notes() {
  ::org::infinity::idm::Note* _add = _internal_add_notes();
  // @@protoc_insertion_point(field_add:org.infinity.idm.Pattern.notes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::Note >&
Pattern::notes() const {
  // @@protoc_insertion_point(field_list:org.infinity.idm.Pattern.notes)
  return notes_;
}

// repeated .org.infinity.idm.TrackParam params = 10;
inline int Pattern::_internal_params_size() const {
  return params_.size();
}
inline int Pattern::params_size() const {
  return _internal_params_size();
}
inline ::org::infinity::idm::TrackParam* Pattern::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Pattern.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::TrackParam >*
Pattern::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:org.infinity.idm.Pattern.params)
  return &params_;
}
inline const ::org::infinity::idm::TrackParam& Pattern::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::org::infinity::idm::TrackParam& Pattern::params(int index) const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Pattern.params)
  return _internal_params(index);
}
inline ::org::infinity::idm::TrackParam* Pattern::_internal_add_params() {
  return params_.Add();
}
inline ::org::infinity::idm::TrackParam* Pattern::add_params() {
  ::org::infinity::idm::TrackParam* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:org.infinity.idm.Pattern.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::TrackParam >&
Pattern::params() const {
  // @@protoc_insertion_point(field_list:org.infinity.idm.Pattern.params)
  return params_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace idm
}  // namespace infinity
}  // namespace org

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::org::infinity::idm::Pattern_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::infinity::idm::Pattern_Type>() {
  return ::org::infinity::idm::Pattern_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pattern_2eproto
