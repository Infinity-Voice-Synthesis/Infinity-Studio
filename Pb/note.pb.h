// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: note.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_note_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_note_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "utils/pair.pb.h"
#include "nparam.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_note_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_note_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_note_2eproto;
namespace org {
namespace infinity {
namespace idm {
class Note;
struct NoteDefaultTypeInternal;
extern NoteDefaultTypeInternal _Note_default_instance_;
}  // namespace idm
}  // namespace infinity
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::infinity::idm::Note* Arena::CreateMaybeMessage<::org::infinity::idm::Note>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace infinity {
namespace idm {

// ===================================================================

class Note final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.infinity.idm.Note) */ {
 public:
  inline Note() : Note(nullptr) {}
  ~Note() override;
  explicit constexpr Note(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Note(const Note& from);
  Note(Note&& from) noexcept
    : Note() {
    *this = ::std::move(from);
  }

  inline Note& operator=(const Note& from) {
    CopyFrom(from);
    return *this;
  }
  inline Note& operator=(Note&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Note& default_instance() {
    return *internal_default_instance();
  }
  static inline const Note* internal_default_instance() {
    return reinterpret_cast<const Note*>(
               &_Note_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Note& a, Note& b) {
    a.Swap(&b);
  }
  inline void Swap(Note* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Note* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Note* New() const final {
    return new Note();
  }

  Note* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Note>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Note& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Note& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Note* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.infinity.idm.Note";
  }
  protected:
  explicit Note(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhonemesFieldNumber = 7,
    kParamsFieldNumber = 10,
    kNameFieldNumber = 5,
    kTimbreFieldNumber = 6,
    kFlagsFieldNumber = 8,
    kStartBeatFieldNumber = 1,
    kStartTickFieldNumber = 2,
    kLengthFieldNumber = 3,
    kPitchFieldNumber = 4,
    kConsonantFieldNumber = 9,
  };
  // repeated .org.infinity.idm.utils.Pair phonemes = 7;
  int phonemes_size() const;
  private:
  int _internal_phonemes_size() const;
  public:
  void clear_phonemes();
  ::org::infinity::idm::utils::Pair* mutable_phonemes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::utils::Pair >*
      mutable_phonemes();
  private:
  const ::org::infinity::idm::utils::Pair& _internal_phonemes(int index) const;
  ::org::infinity::idm::utils::Pair* _internal_add_phonemes();
  public:
  const ::org::infinity::idm::utils::Pair& phonemes(int index) const;
  ::org::infinity::idm::utils::Pair* add_phonemes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::utils::Pair >&
      phonemes() const;

  // repeated .org.infinity.idm.NoteParam params = 10;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::org::infinity::idm::NoteParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::NoteParam >*
      mutable_params();
  private:
  const ::org::infinity::idm::NoteParam& _internal_params(int index) const;
  ::org::infinity::idm::NoteParam* _internal_add_params();
  public:
  const ::org::infinity::idm::NoteParam& params(int index) const;
  ::org::infinity::idm::NoteParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::NoteParam >&
      params() const;

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string timbre = 6;
  void clear_timbre();
  const std::string& timbre() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timbre(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timbre();
  PROTOBUF_MUST_USE_RESULT std::string* release_timbre();
  void set_allocated_timbre(std::string* timbre);
  private:
  const std::string& _internal_timbre() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timbre(const std::string& value);
  std::string* _internal_mutable_timbre();
  public:

  // string flags = 8;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_MUST_USE_RESULT std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 startBeat = 1;
  void clear_startbeat();
  ::PROTOBUF_NAMESPACE_ID::uint32 startbeat() const;
  void set_startbeat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_startbeat() const;
  void _internal_set_startbeat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 startTick = 2;
  void clear_starttick();
  ::PROTOBUF_NAMESPACE_ID::uint32 starttick() const;
  void set_starttick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starttick() const;
  void _internal_set_starttick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 pitch = 4;
  void clear_pitch();
  ::PROTOBUF_NAMESPACE_ID::uint32 pitch() const;
  void set_pitch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pitch() const;
  void _internal_set_pitch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool consonant = 9;
  void clear_consonant();
  bool consonant() const;
  void set_consonant(bool value);
  private:
  bool _internal_consonant() const;
  void _internal_set_consonant(bool value);
  public:

  // @@protoc_insertion_point(class_scope:org.infinity.idm.Note)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::utils::Pair > phonemes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::NoteParam > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timbre_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 startbeat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starttick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pitch_;
  bool consonant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_note_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Note

// uint32 startBeat = 1;
inline void Note::clear_startbeat() {
  startbeat_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Note::_internal_startbeat() const {
  return startbeat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Note::startbeat() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Note.startBeat)
  return _internal_startbeat();
}
inline void Note::_internal_set_startbeat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  startbeat_ = value;
}
inline void Note::set_startbeat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_startbeat(value);
  // @@protoc_insertion_point(field_set:org.infinity.idm.Note.startBeat)
}

// uint32 startTick = 2;
inline void Note::clear_starttick() {
  starttick_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Note::_internal_starttick() const {
  return starttick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Note::starttick() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Note.startTick)
  return _internal_starttick();
}
inline void Note::_internal_set_starttick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  starttick_ = value;
}
inline void Note::set_starttick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starttick(value);
  // @@protoc_insertion_point(field_set:org.infinity.idm.Note.startTick)
}

// uint64 length = 3;
inline void Note::clear_length() {
  length_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Note::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Note::length() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Note.length)
  return _internal_length();
}
inline void Note::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  length_ = value;
}
inline void Note::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:org.infinity.idm.Note.length)
}

// uint32 pitch = 4;
inline void Note::clear_pitch() {
  pitch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Note::_internal_pitch() const {
  return pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Note::pitch() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Note.pitch)
  return _internal_pitch();
}
inline void Note::_internal_set_pitch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pitch_ = value;
}
inline void Note::set_pitch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:org.infinity.idm.Note.pitch)
}

// string name = 5;
inline void Note::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Note::name() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Note.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.infinity.idm.Note.name)
}
inline std::string* Note::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Note.name)
  return _s;
}
inline const std::string& Note::_internal_name() const {
  return name_.Get();
}
inline void Note::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Note::release_name() {
  // @@protoc_insertion_point(field_release:org.infinity.idm.Note.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Note::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.infinity.idm.Note.name)
}

// string timbre = 6;
inline void Note::clear_timbre() {
  timbre_.ClearToEmpty();
}
inline const std::string& Note::timbre() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Note.timbre)
  return _internal_timbre();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_timbre(ArgT0&& arg0, ArgT... args) {
 
 timbre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.infinity.idm.Note.timbre)
}
inline std::string* Note::mutable_timbre() {
  std::string* _s = _internal_mutable_timbre();
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Note.timbre)
  return _s;
}
inline const std::string& Note::_internal_timbre() const {
  return timbre_.Get();
}
inline void Note::_internal_set_timbre(const std::string& value) {
  
  timbre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_timbre() {
  
  return timbre_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Note::release_timbre() {
  // @@protoc_insertion_point(field_release:org.infinity.idm.Note.timbre)
  return timbre_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Note::set_allocated_timbre(std::string* timbre) {
  if (timbre != nullptr) {
    
  } else {
    
  }
  timbre_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timbre,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.infinity.idm.Note.timbre)
}

// repeated .org.infinity.idm.utils.Pair phonemes = 7;
inline int Note::_internal_phonemes_size() const {
  return phonemes_.size();
}
inline int Note::phonemes_size() const {
  return _internal_phonemes_size();
}
inline ::org::infinity::idm::utils::Pair* Note::mutable_phonemes(int index) {
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Note.phonemes)
  return phonemes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::utils::Pair >*
Note::mutable_phonemes() {
  // @@protoc_insertion_point(field_mutable_list:org.infinity.idm.Note.phonemes)
  return &phonemes_;
}
inline const ::org::infinity::idm::utils::Pair& Note::_internal_phonemes(int index) const {
  return phonemes_.Get(index);
}
inline const ::org::infinity::idm::utils::Pair& Note::phonemes(int index) const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Note.phonemes)
  return _internal_phonemes(index);
}
inline ::org::infinity::idm::utils::Pair* Note::_internal_add_phonemes() {
  return phonemes_.Add();
}
inline ::org::infinity::idm::utils::Pair* Note::add_phonemes() {
  ::org::infinity::idm::utils::Pair* _add = _internal_add_phonemes();
  // @@protoc_insertion_point(field_add:org.infinity.idm.Note.phonemes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::utils::Pair >&
Note::phonemes() const {
  // @@protoc_insertion_point(field_list:org.infinity.idm.Note.phonemes)
  return phonemes_;
}

// string flags = 8;
inline void Note::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& Note::flags() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Note.flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.infinity.idm.Note.flags)
}
inline std::string* Note::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Note.flags)
  return _s;
}
inline const std::string& Note::_internal_flags() const {
  return flags_.Get();
}
inline void Note::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Note::release_flags() {
  // @@protoc_insertion_point(field_release:org.infinity.idm.Note.flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Note::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.infinity.idm.Note.flags)
}

// bool consonant = 9;
inline void Note::clear_consonant() {
  consonant_ = false;
}
inline bool Note::_internal_consonant() const {
  return consonant_;
}
inline bool Note::consonant() const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Note.consonant)
  return _internal_consonant();
}
inline void Note::_internal_set_consonant(bool value) {
  
  consonant_ = value;
}
inline void Note::set_consonant(bool value) {
  _internal_set_consonant(value);
  // @@protoc_insertion_point(field_set:org.infinity.idm.Note.consonant)
}

// repeated .org.infinity.idm.NoteParam params = 10;
inline int Note::_internal_params_size() const {
  return params_.size();
}
inline int Note::params_size() const {
  return _internal_params_size();
}
inline ::org::infinity::idm::NoteParam* Note::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:org.infinity.idm.Note.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::NoteParam >*
Note::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:org.infinity.idm.Note.params)
  return &params_;
}
inline const ::org::infinity::idm::NoteParam& Note::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::org::infinity::idm::NoteParam& Note::params(int index) const {
  // @@protoc_insertion_point(field_get:org.infinity.idm.Note.params)
  return _internal_params(index);
}
inline ::org::infinity::idm::NoteParam* Note::_internal_add_params() {
  return params_.Add();
}
inline ::org::infinity::idm::NoteParam* Note::add_params() {
  ::org::infinity::idm::NoteParam* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:org.infinity.idm.Note.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::infinity::idm::NoteParam >&
Note::params() const {
  // @@protoc_insertion_point(field_list:org.infinity.idm.Note.params)
  return params_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace idm
}  // namespace infinity
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_note_2eproto
