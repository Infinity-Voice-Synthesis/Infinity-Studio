// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pattern.proto

#include "pattern.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace org {
namespace infinity {
namespace idm {
constexpr Pattern::Pattern(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notes_()
  , params_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , library_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dictionary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timbrea_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timbreb_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviation_(uint64_t{0u})
  , type_(0)
{}
struct PatternDefaultTypeInternal {
  constexpr PatternDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatternDefaultTypeInternal() {}
  union {
    Pattern _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatternDefaultTypeInternal _Pattern_default_instance_;
}  // namespace idm
}  // namespace infinity
}  // namespace org
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pattern_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pattern_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pattern_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pattern_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, name_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, type_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, file_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, deviation_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, library_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, dictionary_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, timbrea_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, timbreb_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, notes_),
  PROTOBUF_FIELD_OFFSET(::org::infinity::idm::Pattern, params_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::infinity::idm::Pattern)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::infinity::idm::_Pattern_default_instance_),
};

const char descriptor_table_protodef_pattern_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpattern.proto\022\020org.infinity.idm\032\nnote."
  "proto\032\014tparam.proto\"\251\002\n\007Pattern\022\014\n\004name\030"
  "\001 \001(\t\022,\n\004type\030\002 \001(\0162\036.org.infinity.idm.P"
  "attern.Type\022\014\n\004file\030\003 \001(\t\022\021\n\tdeviation\030\004"
  " \001(\004\022\017\n\007library\030\005 \001(\t\022\022\n\ndictionary\030\006 \001("
  "\t\022\017\n\007timbreA\030\007 \001(\t\022\017\n\007timbreB\030\010 \001(\t\022%\n\005n"
  "otes\030\t \003(\0132\026.org.infinity.idm.Note\022,\n\006pa"
  "rams\030\n \003(\0132\034.org.infinity.idm.TrackParam"
  "\"%\n\004Type\022\t\n\005EMPTY\020\000\022\010\n\004MIDI\020\001\022\010\n\004WAVE\020\002b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pattern_2eproto_deps[2] = {
  &::descriptor_table_note_2eproto,
  &::descriptor_table_tparam_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pattern_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pattern_2eproto = {
  false, false, 367, descriptor_table_protodef_pattern_2eproto, "pattern.proto", 
  &descriptor_table_pattern_2eproto_once, descriptor_table_pattern_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_pattern_2eproto::offsets,
  file_level_metadata_pattern_2eproto, file_level_enum_descriptors_pattern_2eproto, file_level_service_descriptors_pattern_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pattern_2eproto_getter() {
  return &descriptor_table_pattern_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pattern_2eproto(&descriptor_table_pattern_2eproto);
namespace org {
namespace infinity {
namespace idm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pattern_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pattern_2eproto);
  return file_level_enum_descriptors_pattern_2eproto[0];
}
bool Pattern_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pattern_Type Pattern::EMPTY;
constexpr Pattern_Type Pattern::MIDI;
constexpr Pattern_Type Pattern::WAVE;
constexpr Pattern_Type Pattern::Type_MIN;
constexpr Pattern_Type Pattern::Type_MAX;
constexpr int Pattern::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Pattern::_Internal {
 public:
};

void Pattern::clear_notes() {
  notes_.Clear();
}
void Pattern::clear_params() {
  params_.Clear();
}
Pattern::Pattern(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notes_(arena),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:org.infinity.idm.Pattern)
}
Pattern::Pattern(const Pattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notes_(from.notes_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file(), 
      GetArenaForAllocation());
  }
  library_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_library().empty()) {
    library_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_library(), 
      GetArenaForAllocation());
  }
  dictionary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dictionary().empty()) {
    dictionary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dictionary(), 
      GetArenaForAllocation());
  }
  timbrea_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timbrea().empty()) {
    timbrea_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timbrea(), 
      GetArenaForAllocation());
  }
  timbreb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timbreb().empty()) {
    timbreb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timbreb(), 
      GetArenaForAllocation());
  }
  ::memcpy(&deviation_, &from.deviation_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&deviation_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:org.infinity.idm.Pattern)
}

inline void Pattern::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
library_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dictionary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timbrea_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timbreb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deviation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&deviation_)) + sizeof(type_));
}

Pattern::~Pattern() {
  // @@protoc_insertion_point(destructor:org.infinity.idm.Pattern)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pattern::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  library_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dictionary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timbrea_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timbreb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pattern::ArenaDtor(void* object) {
  Pattern* _this = reinterpret_cast< Pattern* >(object);
  (void)_this;
}
void Pattern::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pattern::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pattern::Clear() {
// @@protoc_insertion_point(message_clear_start:org.infinity.idm.Pattern)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notes_.Clear();
  params_.Clear();
  name_.ClearToEmpty();
  file_.ClearToEmpty();
  library_.ClearToEmpty();
  dictionary_.ClearToEmpty();
  timbrea_.ClearToEmpty();
  timbreb_.ClearToEmpty();
  ::memset(&deviation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&deviation_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pattern::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.infinity.idm.Pattern.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.infinity.idm.Pattern.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::org::infinity::idm::Pattern_Type>(val));
        } else goto handle_unusual;
        continue;
      // string file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.infinity.idm.Pattern.file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 deviation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string library = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_library();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.infinity.idm.Pattern.library"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dictionary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dictionary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.infinity.idm.Pattern.dictionary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timbreA = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_timbrea();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.infinity.idm.Pattern.timbreA"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timbreB = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_timbreb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.infinity.idm.Pattern.timbreB"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.infinity.idm.Note notes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .org.infinity.idm.TrackParam params = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pattern::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.infinity.idm.Pattern)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.infinity.idm.Pattern.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .org.infinity.idm.Pattern.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string file = 3;
  if (!this->_internal_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.infinity.idm.Pattern.file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file(), target);
  }

  // uint64 deviation = 4;
  if (this->_internal_deviation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_deviation(), target);
  }

  // string library = 5;
  if (!this->_internal_library().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_library().data(), static_cast<int>(this->_internal_library().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.infinity.idm.Pattern.library");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_library(), target);
  }

  // string dictionary = 6;
  if (!this->_internal_dictionary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dictionary().data(), static_cast<int>(this->_internal_dictionary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.infinity.idm.Pattern.dictionary");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dictionary(), target);
  }

  // string timbreA = 7;
  if (!this->_internal_timbrea().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timbrea().data(), static_cast<int>(this->_internal_timbrea().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.infinity.idm.Pattern.timbreA");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_timbrea(), target);
  }

  // string timbreB = 8;
  if (!this->_internal_timbreb().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timbreb().data(), static_cast<int>(this->_internal_timbreb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.infinity.idm.Pattern.timbreB");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_timbreb(), target);
  }

  // repeated .org.infinity.idm.Note notes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_notes(i), target, stream);
  }

  // repeated .org.infinity.idm.TrackParam params = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.infinity.idm.Pattern)
  return target;
}

size_t Pattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.infinity.idm.Pattern)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.infinity.idm.Note notes = 9;
  total_size += 1UL * this->_internal_notes_size();
  for (const auto& msg : this->notes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .org.infinity.idm.TrackParam params = 10;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string file = 3;
  if (!this->_internal_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  // string library = 5;
  if (!this->_internal_library().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_library());
  }

  // string dictionary = 6;
  if (!this->_internal_dictionary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dictionary());
  }

  // string timbreA = 7;
  if (!this->_internal_timbrea().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timbrea());
  }

  // string timbreB = 8;
  if (!this->_internal_timbreb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timbreb());
  }

  // uint64 deviation = 4;
  if (this->_internal_deviation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_deviation());
  }

  // .org.infinity.idm.Pattern.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pattern::GetClassData() const { return &_class_data_; }

void Pattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Pattern *>(to)->MergeFrom(
      static_cast<const Pattern &>(from));
}


void Pattern::MergeFrom(const Pattern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.infinity.idm.Pattern)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notes_.MergeFrom(from.notes_);
  params_.MergeFrom(from.params_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_file().empty()) {
    _internal_set_file(from._internal_file());
  }
  if (!from._internal_library().empty()) {
    _internal_set_library(from._internal_library());
  }
  if (!from._internal_dictionary().empty()) {
    _internal_set_dictionary(from._internal_dictionary());
  }
  if (!from._internal_timbrea().empty()) {
    _internal_set_timbrea(from._internal_timbrea());
  }
  if (!from._internal_timbreb().empty()) {
    _internal_set_timbreb(from._internal_timbreb());
  }
  if (from._internal_deviation() != 0) {
    _internal_set_deviation(from._internal_deviation());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pattern::CopyFrom(const Pattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.infinity.idm.Pattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pattern::IsInitialized() const {
  return true;
}

void Pattern::InternalSwap(Pattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  notes_.InternalSwap(&other->notes_);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_, GetArenaForAllocation(),
      &other->file_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &library_, GetArenaForAllocation(),
      &other->library_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dictionary_, GetArenaForAllocation(),
      &other->dictionary_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timbrea_, GetArenaForAllocation(),
      &other->timbrea_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timbreb_, GetArenaForAllocation(),
      &other->timbreb_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pattern, type_)
      + sizeof(Pattern::type_)
      - PROTOBUF_FIELD_OFFSET(Pattern, deviation_)>(
          reinterpret_cast<char*>(&deviation_),
          reinterpret_cast<char*>(&other->deviation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pattern::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pattern_2eproto_getter, &descriptor_table_pattern_2eproto_once,
      file_level_metadata_pattern_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace idm
}  // namespace infinity
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::infinity::idm::Pattern* Arena::CreateMaybeMessage< ::org::infinity::idm::Pattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::infinity::idm::Pattern >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
